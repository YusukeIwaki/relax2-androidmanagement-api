#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'relax2/base'
require 'googleauth'
require 'stringio'

class Util
  CREDENTIALS_CACHE = Relax2::FileCache.new('androidmanagement', 'credentials')
  ACCESS_TOKEN_CACHE = Relax2::FileCache.new('androidmanagement', 'access_token')

  class << self
    def save_credenrials(key_filename)
      service_account_string = File.read(key_filename)
      access_token = fetch_access_token(service_account_string)

      CREDENTIALS_CACHE.save(service_account_string)
      puts 'credentials are stored in ~/.androidmanagement'

      ACCESS_TOKEN_CACHE.save(access_token)
      puts 'access token is stored in ~/.androidmanagement'
    end

    def fetch_access_token(service_account_string)
      client = Google::Auth::ServiceAccountCredentials.make_creds(
        json_key_io: StringIO.new(service_account_string),
        scope: ['https://www.googleapis.com/auth/androidmanagement'],
      )
      client.fetch_access_token!
      client.access_token
    end
  end
end

def auth_with_google(request, perform_request)
  service_account_string = Util::CREDENTIALS_CACHE.load
  raise 'configure is required' unless service_account_string

  cached_access_token = Util::ACCESS_TOKEN_CACHE.load
  access_token = cached_access_token || Util.fetch_access_token(service_account_string)

  service_account_json = JSON.parse(service_account_string)
  request.query_parameters.map! do |name, value|
    [name, value.gsub('{project_id}', service_account_json['project_id'])]
  end
  request.headers << ['Authorization', "Bearer #{access_token}"]
  response = perform_request.call(request)

  if response.status == 401
    if cached_access_token
      Util::ACCESS_TOKEN_CACHE.clear
      cached_access_token = nil

      access_token = Util.fetch_access_token(service_account_string)
      request.headers.reject! { |name, value| name == 'Authorization' }
      request.headers << ['Authorization', "Bearer #{access_token}"]
      response = perform_request.call(request)
    end
  end

  if response.status < 300
    if !cached_access_token
      Util::ACCESS_TOKEN_CACHE.save(access_token)
    end
  end

  response
end

class App < Relax2::Base
  base_url 'https://androidmanagement.googleapis.com/v1'

  interceptor method(:auth_with_google)
  interceptor :json_request

  # interceptor :verbose_print_request
  # interceptor :verbose_print_response
  interceptor :print_response
end

if ARGV.first == 'configure'
  raise 'configure path/to/service_account.json' unless ARGV.size == 2
  Util.save_credenrials(ARGV[1])
else
  App.run
end
